{"ast":null,"code":"let accessToken;\nconst clientId = '3dbd2ad35ee14d828a66300875a42e8b';\nconst redirectUri = 'http://localhost:3000/';\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    ;\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  searchPlaylists(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/browse/categories/${term}/playlists?limit=5`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.playlists) {\n        return [];\n      }\n\n      return jsonResponse.playlists.items.map(playlist => ({\n        id: playlist.id,\n        name: playlist.name,\n        uri: playlist.uri\n      }));\n    });\n  },\n\n  getCategoryList() {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/browse/categories&limit=30`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      /*if (!jsonResponse.playlists) {\n          return [];\n      }\n      return jsonResponse.playlists.items.map(playlist => ({\n          id: playlist.id,\n          name: playlist.name,\n          uri: playlist.uri\n      }))*/\n      console.log(jsonResponse);\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/franz/Documents/web/portfolio projects/mood manager/mood_manager/src/util/Spotify.js"],"names":["accessToken","clientId","redirectUri","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","searchPlaylists","term","fetch","headers","Authorization","then","response","json","jsonResponse","playlists","items","map","playlist","id","name","uri","getCategoryList","console","log"],"mappings":"AAAA,IAAIA,WAAJ;AACA,MAAMC,QAAQ,GAAG,kCAAjB;AACA,MAAMC,WAAW,GAAG,wBAApB;AAEA,MAAMC,OAAO,GAAG;AACZC,EAAAA,cAAc,GAAG;AACb,QAAIJ,WAAJ,EAAiB;AACb,aAAOA,WAAP;AACH;;AAAA;AAED,UAAMK,gBAAgB,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,sBAA3B,CAAzB;AACA,UAAMC,cAAc,GAAGJ,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,oBAA3B,CAAvB;;AAEA,QAAIJ,gBAAgB,IAAIK,cAAxB,EAAwC;AACpCV,MAAAA,WAAW,GAAGK,gBAAgB,CAAC,CAAD,CAA9B;AACA,YAAMM,SAAS,GAAGC,MAAM,CAACF,cAAc,CAAC,CAAD,CAAf,CAAxB;AAEAJ,MAAAA,MAAM,CAACO,UAAP,CAAkB,MAAMb,WAAW,GAAG,EAAtC,EAA0CW,SAAS,GAAG,IAAtD;AACAL,MAAAA,MAAM,CAACQ,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,GAA/C;AAEA,aAAOf,WAAP;AACH,KARD,MAQO;AACH,YAAMgB,SAAS,GAAI,oDAAmDf,QAAS,kEAAiEC,WAAY,EAA5J;AACAI,MAAAA,MAAM,CAACC,QAAP,GAAkBS,SAAlB;AACH;AAEJ,GAtBW;;AAwBZC,EAAAA,eAAe,CAACC,IAAD,EAAO;AAClB,UAAMlB,WAAW,GAAGG,OAAO,CAACC,cAAR,EAApB;AACA,WAAOe,KAAK,CAAE,gDAA+CD,IAAK,oBAAtD,EAA2E;AACnFE,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,EAAG,UAASrB,WAAY;AAAtC;AAD0E,KAA3E,CAAL,CAEJsB,IAFI,CAECC,QAAQ,IAAI;AAChB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KAJM,EAIJF,IAJI,CAICG,YAAY,IAAI;AACpB,UAAI,CAACA,YAAY,CAACC,SAAlB,EAA6B;AACzB,eAAO,EAAP;AACH;;AACD,aAAOD,YAAY,CAACC,SAAb,CAAuBC,KAAvB,CAA6BC,GAA7B,CAAiCC,QAAQ,KAAK;AACjDC,QAAAA,EAAE,EAAED,QAAQ,CAACC,EADoC;AAEjDC,QAAAA,IAAI,EAAEF,QAAQ,CAACE,IAFkC;AAGjDC,QAAAA,GAAG,EAAEH,QAAQ,CAACG;AAHmC,OAAL,CAAzC,CAAP;AAKH,KAbM,CAAP;AAcH,GAxCW;;AA0CbC,EAAAA,eAAe,GAAG;AACb,UAAMjC,WAAW,GAAGG,OAAO,CAACC,cAAR,EAApB;AACA,WAAOe,KAAK,CAAE,uDAAF,EAA0D;AAClEC,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,EAAG,UAASrB,WAAY;AAAtC;AADyD,KAA1D,CAAL,CAEJsB,IAFI,CAECC,QAAQ,IAAI;AAChB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KAJM,EAIJF,IAJI,CAICG,YAAY,IAAI;AACpB;;;;;;;;AAQAS,MAAAA,OAAO,CAACC,GAAR,CAAYV,YAAZ;AACH,KAdM,CAAP;AAeH;;AA3DW,CAAhB;AA8DA,eAAetB,OAAf","sourcesContent":["let accessToken;\nconst clientId = '3dbd2ad35ee14d828a66300875a42e8b';\nconst redirectUri = 'http://localhost:3000/';\n\nconst Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        }; \n\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n        if (accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n\n            return accessToken;\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUrl;\n        }\n\n    },\n\n    searchPlaylists(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/browse/categories/${term}/playlists?limit=5`, {\n            headers: {Authorization: `Bearer ${accessToken}`}\n        }).then(response => {\n            return response.json();\n        }).then(jsonResponse => {\n            if (!jsonResponse.playlists) {\n                return [];\n            }\n            return jsonResponse.playlists.items.map(playlist => ({\n                id: playlist.id,\n                name: playlist.name,\n                uri: playlist.uri\n            }))\n        })\n    },\n\n   getCategoryList() {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/browse/categories&limit=30`, {\n            headers: {Authorization: `Bearer ${accessToken}`}\n        }).then(response => {\n            return response.json();\n        }).then(jsonResponse => {\n            /*if (!jsonResponse.playlists) {\n                return [];\n            }\n            return jsonResponse.playlists.items.map(playlist => ({\n                id: playlist.id,\n                name: playlist.name,\n                uri: playlist.uri\n            }))*/\n            console.log(jsonResponse);\n        })\n    }\n};\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}